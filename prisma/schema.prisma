
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DISTRICT
  COMMUNITY
  ZONAL
  CELL
  LEADER
  USER
}

enum Scope {
  GENERAL
  DISTRICT
  COMMUNITY
}

  
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  phone         String?         
  hashedPassword String?
  emailVerified DateTime?
  birthDate DateTime?
  image         String?
  gender         String?
  address         String?
  occupation         String?
  maritalStatus         String?
  newConvert         String?
  formerReligion         String?
  notes         String?
  privacyConsent         Boolean?
  contactConsent         Boolean?
  disclosureConsent         Boolean?

  accounts      Account[]
  sessions      Session[]

  departmentId String? @db.ObjectId
  department Department? @relation("Department", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cellId    String? @db.ObjectId
  cell          Cell?       @relation(fields: [cellId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role      UserRole? @default(USER)

  districtPastor District? @relation("DistrictPastor")
  communityPastor Community? @relation("CommunityPastor")
  zonalLeader Zone? @relation("ZonalLeader")
  cellLeader Cell? @relation("CellLeader")
  TeamPastor Team? @relation("TeamPastor")
  hod Department? @relation("HOD")

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model District {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  campus String @default("Gbagada")
  communities Community[]
  
  pastorId String? @db.ObjectId @unique
  pastor User? @relation("DistrictPastor", fields: [pastorId], references: [id])

  Announcement Announcement[]
  Event Event[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  districtId String @db.ObjectId
  district District @relation(fields: [districtId], references: [id])
  zones Zone[]

  pastorId String? @db.ObjectId @unique
  pastor User? @relation("CommunityPastor", fields: [pastorId], references: [id])

  Event Event[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zone {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  communityId String @db.ObjectId
  community Community @relation(fields: [communityId], references: [id])
  cell Cell[]
  
  leaderId String? @db.ObjectId @unique
  leader User? @relation("ZonalLeader", fields: [leaderId], references: [id])
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  zoneId String @db.ObjectId
  zone Zone @relation(fields: [zoneId], references: [id])
  members User[]
  
  leaderId String? @db.ObjectId @unique
  leader User? @relation("CellLeader", fields: [leaderId], references: [id])
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  desc  String?

  pastorId String? @db.ObjectId @unique
  pastor User? @relation("TeamPastor", fields: [pastorId], references: [id])
  departments Department[] @relation("Team")
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  desc  String?

  members User[] @relation("Department")
  hodId String? @db.ObjectId @unique
  hod User? @relation("HOD", fields: [hodId], references: [id])
  teamId String? @db.ObjectId
  team Team? @relation("Team", fields: [teamId], references: [id])
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  from  String
  date  DateTime
  desc  String
  img   String?

  scope   Scope    @default(GENERAL)
  districtId String? @db.ObjectId
  district   District? @relation(fields: [districtId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  from  String
  desc  String
  img   String?
  date  DateTime
  startTime   DateTime
  endTime   DateTime

  scope      Scope    @default(GENERAL)
  districtId String?  @db.ObjectId
  communityId String? @db.ObjectId

  district   District?  @relation(fields: [districtId], references: [id])
  community  Community? @relation(fields: [communityId], references: [id])
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}