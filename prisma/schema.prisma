
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DISTRICT
  COMMUNITY
  ZONAL
  CELL
  LEADER
  USER
}

enum Scope {
  GENERAL
  DISTRICT
  COMMUNITY
}

  
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  phone         String?         
  hashedPassword String?
  emailVerified DateTime?
  birthDate DateTime?
  image         String?
  gender         String?
  address         String?
  occupation         String?
  maritalStatus         String?
  newConvert         String?
  formerReligion         String?
  notes         String?
  privacyConsent         Boolean?
  contactConsent         Boolean?
  disclosureConsent         Boolean?

  accounts      Account[]
  sessions      Session[]

  cellId    String? @db.ObjectId
  cell          Cell?       @relation(fields: [cellId], references: [id])
  role      UserRole? @default(USER)
  districtPastor District
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model District {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  campus String @default("Gbagada")
  pastorId String? @db.ObjectId
  pastor User? @relation(fields: [pastorId], references: [id])
  communities Community[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Announcement Announcement[]

  Event Event[]
}

model Community {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  districtId String @db.ObjectId
  district District @relation(fields: [districtId], references: [id])
  zones Zone[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Event Event[]
}

model Zone {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  communityId String @db.ObjectId
  community Community @relation(fields: [communityId], references: [id])
  cell Cell[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  zoneId String @db.ObjectId
  zone Zone @relation(fields: [zoneId], references: [id])
  user User[]
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  from  String
  date  DateTime
  desc  String
  img   String?

  scope   Scope    @default(GENERAL)
  districtId String? @db.ObjectId
  district   District? @relation(fields: [districtId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  from  String
  desc  String
  img   String?
  date  DateTime
  startTime   DateTime
  endTime   DateTime

  scope      Scope    @default(GENERAL)
  districtId String?  @db.ObjectId
  communityId String? @db.ObjectId

  district   District?  @relation(fields: [districtId], references: [id])
  community  Community? @relation(fields: [communityId], references: [id])
   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}